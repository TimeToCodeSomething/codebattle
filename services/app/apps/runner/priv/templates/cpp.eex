#include "../precompiled.hpp"
#include "solution.cpp"

using namespace std;

int main() {
  std::stringstream buffer_;
  std::streambuf * oldBuf_ = std::cout.rdbuf(buffer_.rdbuf());
  bool success_ = true;
  string output_ = "";
  vector<json> finalResults_ = {};

  try {
    <%= for %{arguments: arguments, index: i} <- checks do %>
      <%= for %{defining: defining, value: value} <- arguments.info do %>
        <%= defining %> = <%= value %>;
      <% end %>

      auto start<%= i %>_ = std::chrono::high_resolution_clock::now();
      auto result<%= i %>_ = solution(<%= arguments.expression %>);
      std::chrono::duration<double> executionTime<%= i %>_ = std::chrono::high_resolution_clock::now() - start<%= i %>_;
      char buffer<%= i %>_[20];
      std::sprintf(buffer<%= i %>_, "%.7f", executionTime<%= i %>_.count());
      auto time<%= i %>_ = std::string(buffer<%= i %>_);
      output_ = buffer_.str();
      buffer_.str("");
      finalResults_.push_back(BuildResultMessage("result", result<%= i %>_, output_,  time<%= i %>_));
    <% end %>

  } catch (const std::exception& e) {
    json message = BuildErrorMessage("error", e.what());
    finalResults_.push_back(message);
  }

  std::cout.rdbuf(oldBuf_);
  for_each(finalResults_.begin(), finalResults_.end(), SendMessage);
  cout << buffer_.str() << "\n";
}
